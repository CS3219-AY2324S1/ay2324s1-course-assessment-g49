openapi: 3.0.0
info:
  title: Peerprep
  description: A technical interview preparation platform and peer matching system, where students can find peers to practice whiteboard-style interview questions together
  version: 1.0.0

servers:
  - url: http://localhost:8080
tags:
  - name: questions
    description: Operations about questions
  - name: users
    description: Operations about users

paths:
  /question:
    post:
      tags:
        - questions
      description: Creates a question
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuestionRequest"
      responses:
        '200':
          description: Question successfully created
          content:
            text/plain:
              schema:
                type: string
                description: Id of newly created question
                example: "65017ab714d2e510a11d0cc9"
    get:
      tags:
        - questions
      description: Retrieves a list of all questions
      responses:
        '200':
          description: Successfully retrieved all questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionOverview"
  /question/{id}:
    get:
      tags:
        - questions
      description: Retrieves a specific question
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved question
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionResponse"
    delete:
      tags:
        - questions
      description: Deletes a specific question
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted question. Empty response
  /users:
    post:
      tags:
        - users
      description: Creates a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        '200':
          description: Successfully created user
          content:
            text/plain:
              schema:
                type: string
                description: Id of newly created user
                example: 1
    get:
      tags:
        - users
      description: Retrieves a list of all users
      responses:
        '200':
          description: Successfully retrieved all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
  /users/{id}:
    get:
      tags:
        - users
      description: Retrieves a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    patch:
      tags:
        - users
      description: Updates a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        '200':
          description: Successfully updated user
          content:
            text/plain:
              schema:
                type: string
                description: Id of updated user
                example: 1

    delete:
      tags:
        - users
      description: Deletes a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted user

components:
  schemas:
    CreateQuestionRequest:
      type: object
      required:
        - title
        - description
        - categories
        - complexity
      properties:
        title:
          type: string
          example: Reverse a String
        description:
          type: string
          example: Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.
        categories:
          type: array
          items:
            type: string
          example: [ ARRAY, ALGORITHMS ]
        complexity:
          type: string
          example: MEDIUM
    QuestionOverview:
      type: object
      properties:
        title:
          type: string
          example: Reverse a String
        categories:
          type: array
          items:
            type: string
          example: [ ARRAY, ALGORITHMS ]
        complexity:
          type: string
          example: MEDIUM
    QuestionResponse:
      type: object
      properties:
        title:
          type: string
          example: Reverse a String
        description:
          type: string
          example: Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.
        categories:
          type: array
          items:
            type: string
          example: [ ARRAY, ALGORITHMS ]
        complexity:
          type: string
          example: MEDIUM

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - country
        - password
      properties:
        username:
          type: string
          example: apple
        email:
          type: string
          example: apple@gmail.com
        country:
          type: string
          example: Singapore
        password:
          type: string
          example: applepassword
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: orange
        country:
          type: string
          example: Malaysia
    UserResponse:
      type: object
      properties:
        username:
          type: string
          example: apple
        email:
          type: string
          example: apple@gmail.com
        country:
          type: string
          example: Singapore
